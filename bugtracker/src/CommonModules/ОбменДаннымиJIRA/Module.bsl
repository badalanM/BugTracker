
#Область Служебные
Функция ПолучитьПараметрыПодключения()
	
	СтруктураПараметров = Новый Структура;
	Запись = РегистрыСведений.ПараметрыПодключенияJIRA.СоздатьМенеджерЗаписи();
	Запись.Прочитать();
	СтруктураПараметров.Вставить("JiraServerHost",Запись.JiraServerHost);
	СтруктураПараметров.Вставить("JiraServerProtoсol", Запись.JiraServerProtokol);
	СтруктураПараметров.Вставить("JiraServerAPI",Запись.JiraServerAPI);
	СтруктураПараметров.Вставить("JiraCustomField_EpicLink",Запись.JiraCustomField_EpicLink);
	СтруктураПараметров.Вставить("JiraCustomField_EpicName",Запись.JiraCustomField_EpicName);
	СтруктураПараметров.Вставить("JiraUserName",Запись.JiraUserName);
	СтруктураПараметров.Вставить("JiraUserPass",Запись.JiraUserPass);
	СтруктураПараметров.Вставить("JiraProjectKey",Запись.JiraProjectKey);
	СтруктураПараметров.Вставить("ЗащищенноеСоединение",?(Запись.JiraServerProtokol = перечисления.ИнтернетПротокол.HTTP,ложь,истина));
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЗашифроватьBase64Сервер(Строка, КодировкаТекста = "UTF-8")
	ДД = ПолучитьДвоичныеДанныеИзСтроки(Строка,КодировкаТекста);
	Стр64 = ПолучитьBase64СтрокуИзДвоичныхДанных(ДД);
	Возврат Стр64; 
КонецФункции

Функция СформироватьЗаголовкиЗапроса(ИмяПользователя = "", ПарольПользователя = "", ТипКонтента = неопределено)
	
	ЗаголовкиHTTP = Новый Соответствие;
	Если не ЗначениеЗаполнено(ИмяПользователя) Тогда
		ПараметрыСервера = РегистрыСведений.ПараметрыПодключенияJIRA.СоздатьМенеджерЗаписи();
		ПараметрыСервера.Прочитать();
		ИмяПользователя = ПараметрыСервера.JiraUserName;
		ПарольПользователя = ПараметрыСервера.JiraUserPass;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ТипКонтента) Тогда
		ТипКонтента = "application/json";
	КонецЕсли;
	
	СтрукПарам = Новый Структура;
	СтрукПарам.Вставить("ЗаголовокАвторизации","");
	Если ЗначениеЗаполнено(ИмяПользователя)
		И ЗначениеЗаполнено(ПарольПользователя) Тогда
		СтрукПарам.Вставить("ЗаголовокАвторизации", "Basic " + ЗашифроватьBase64Сервер(ИмяПользователя+":"+ПарольПользователя));
	КонецЕсли;
	
	ЗаголовкиHTTP.Вставить("Authorization", СтрукПарам.ЗаголовокАвторизации);
	ЗаголовкиHTTP.Вставить("Content-Type", ТипКонтента);
	
	Возврат ЗаголовкиHTTP;
	
КонецФункции

Процедура ДобавитьЗаписьВЛог(Лог, Текст, Отказ = ложь)
	
	Лог = Лог + Текст + Символы.ПС;
	Отказ = Истина;
	
КонецПроцедуры

Процедура ЗаписатьРезультатОбмена(ЛогОбмена)
	ЗаписьРегистра = РегистрыСведений.ОбменДаннымиJIRA.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Дата = ТекущаяДатаСеанса();
	ЗаписьРегистра.Лог = ЛогОбмена;
	ЗаписьРегистра.Записать();
КонецПроцедуры	

Функция ПолучитьПроверяющего(ТаблицаПользователей, НомерПользователя, ИсполнительJIRA, ЗадачаJIRA, ЛогОбмена, Отказ)

	КоличествоПользователей = ТаблицаПользователей.Количество();
	
	Если НомерПользователя > (КоличествоПользователей-1) Тогда
		НомерПользователя = 0;
	КонецЕсли;	
	
	ПроверяющийПользователь =  ТаблицаПользователей[НомерПользователя].Пользователь1С;
	
	Если ПроверяющийПользователь.JiraUserName = ИсполнительJIRA Тогда
		Если КоличествоПользователей = 1 Тогда
			ЛогОбмена = ЛогОбмена + "Невозможно определить проверяющего для задачи:"+ЗадачаJIRA+Символы.ПС;
			Отказ = Истина;
			Возврат Неопределено;
		Иначе
			НомерПользователя = НомерПользователя + 1;
			ПроверяющийПользователь = ПолучитьПроверяющего(ТаблицаПользователей, НомерПользователя, ИсполнительJIRA, ЗадачаJIRA, ЛогОбмена, Отказ);
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат ПроверяющийПользователь;
	
КонецФункции	

Функция ПолучитьТаблицуДанныхJira(ИмяФайла, ЛогОбмена, Отказ)
	
	Файл = Новый Файл(ИмяФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Если Файл.Существует() Тогда
		Попытка
			ТабличныйДокумент.Прочитать(Файл.ПолноеИмя, СпособЧтенияЗначенийТабличногоДокумента.Значение);
		Исключение
			ЛогОбмена = ЛогОбмена + НСтр("ru='Ошибка чтения файла отчета'");
			Отказ = Истина;
		КонецПопытки
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕСли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь1С,
	|	Пользователи.JiraUserName КАК ПользовательJIRA
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.JiraUserName = """"";
	
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаПользователей.Количество() = 0 Тогда
		ЛогОбмена = ЛогОбмена + НСтр("ru='Пустой список пользователей JIRA'");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕСли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь1С,
	|	Пользователи.JiraUserName КАК ПользовательJIRA,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.ПометкаУдаления
	|	И НЕ Пользователи.JiraUserName = """"
	|	И НЕ Пользователи.НеУчаствуетВПроверкеТекстаКода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ТаблицаИсполнителей = Запрос.Выполнить().Выгрузить();	
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("ТекстКода", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("СсылкаJIRA", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(400)));
	ТаблицаДанных.Колонки.Добавить("EpicLinkJIRA", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("КомпонентJIRA", Новый ОписаниеТипов("Строка"));
	ТаблицаДанных.Колонки.Добавить("АвторJIRA", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаДанных.Колонки.Добавить("ИсполнительJIRA", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ТаблицаДанных.Колонки.Добавить("ДатаРаботыJIRA", Новый ОписаниеТипов("Дата"));
	ТаблицаДанных.Колонки.Добавить("ЧасыРаботыJIRA", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("ПроверитьТекстКода", Новый ОписаниеТипов("Булево"));
	ТаблицаДанных.Колонки.Добавить("ПроверяющийТекстКода", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));

	ЛистыДокумента = ТабличныйДокумент.Области;
	
	ТаблицаJira = ТабличныйДокумент.ПолучитьОбласть("Записи_о_работе");
	КоличествоСтрок = ТаблицаJira.ПолучитьРазмерОбластиДанныхПоВертикали();
	
	//Получим последнего проверяющего
	НомерПроверяющего = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ошибки.ПроверяющийТекстКода КАК ПроверяющийТекстКода
		|ИЗ
		|	Справочник.Ошибки КАК Ошибки
		|ГДЕ
		|	НЕ Ошибки.ПометкаУдаления
		|	И НЕ Ошибки.ПроверяющийТекстКода = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И Ошибки.ПроверитьТекстКода
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ошибки.Ссылка УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		НайденаСтрока = ТаблицаИсполнителей.Найти(РезультатЗапроса.ПроверяющийТекстКода,"Пользователь1С");
		Если НайденаСтрока <> Неопределено Тогда
			НомерПроверяющего = ТаблицаИсполнителей.Индекс(НайденаСтрока)+1;
		КонецЕСли;	
	КонецЕсли;	
	
	Для НомСтр = 2 по КоличествоСтрок Цикл
		
		ИсполнительJIRA = СокрЛП(ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C5").ТекущаяОбласть.Текст);
		ТекстКода = СокрЛП(ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C23").ТекущаяОбласть.Текст);
		Если ТаблицаПользователей.Найти(ИсполнительJIRA, "ПользовательJIRA") = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ТекстКода = СтрЗаменить(ТекстКода,Символы.Таб,"        ");
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.ТекстКода  = ТекстКода;
		НоваяСтрока.СсылкаJIRA = "https://jira.ibs.ru/browse/" + ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C1").ТекущаяОбласть.Текст;
		НоваяСтрока.EpicLinkJIRA  = ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C22").ТекущаяОбласть.Текст;
		НоваяСтрока.КомпонентJIRA = ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C14").ТекущаяОбласть.Текст;
		НоваяСтрока.АвторJIRA     = ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C25").ТекущаяОбласть.Текст;
		НоваяСтрока.ИсполнительJIRA = ИсполнительJIRA;
		НоваяСтрока.ЧасыРаботыJIRA  = ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C3").ТекущаяОбласть.Текст;
		
		//ДатаРаботыJIRA = СтрЗаменить(ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C4").ТекущаяОбласть.Текст,"-","");
		//ДатаРаботыJIRA = СтрЗаменить(ДатаРаботыJIRA," ","");
		//ДатаРаботыJIRA = СтрЗаменить(ДатаРаботыJIRA,":","");
		//НоваяСтрока.ДатаРаботыJIRA = ДатаРаботыJIRA;
		
		НоваяСтрока.ДатаРаботыJIRA = ТаблицаJira.ПолучитьОбласть("R"+НомСтр+"C4").ТекущаяОбласть.Значение;
		
		Если Лев(ТекстКода,2) = "//" И СтрЧислоСтрок(ТекстКода) > 1 Тогда  
			
			НоваяСтрока.ПроверитьТекстКода = Истина;
			
			ПроверяющийJIRA = ПолучитьПроверяющего(ТаблицаИсполнителей, НомерПроверяющего, ИсполнительJIRA, НоваяСтрока.СсылкаJIRA, ЛогОбмена, Отказ);
			
			НоваяСтрока.ПроверяющийТекстКода = ПроверяющийJIRA;
			НомерПроверяющего = НомерПроверяющего + 1;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции	

#КонецОбласти

#Область Jira
Функция ПолучитьОтчетПоОтработанномуВремени(ДатаНачала, ДатаОкончания, Лог, Отказ, КодПроекта = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодПроекта) Тогда
		КодПроекта = "15400"; //Практика 1С
	КонецЕсли;

	ИмяФайла = ПолучитьИмяВременногоФайла("xls");

	ПараметрыПодключения = ПолучитьПараметрыПодключения();
	
	Если ПараметрыПодключения.ЗащищенноеСоединение Тогда
		ssl = Новый ЗащищенноеСоединениеOpenSSL(неопределено, неопределено);
	Иначе
		ssl = неопределено;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.JiraServerHost, ,ПараметрыПодключения.JiraUserName ,ПараметрыПодключения.JiraUserPass , , 60, ssl);
	
	Заголовки = СформироватьЗаголовкиЗапроса();
	
	// Получаем ид текущей сессии
	HTTPЗапрос = Новый HTTPЗапрос("/rest/auth/1/session",Заголовки);
	НоваяЗапись = Новый ЗаписьJSON;
	НоваяЗапись.УстановитьСтроку();
	НоваяЗапись.ЗаписатьНачалоОбъекта();
	
	НоваяЗапись.ЗаписатьИмяСвойства("username");
	НоваяЗапись.ЗаписатьЗначение(ПараметрыПодключения.JiraUserName);
	НоваяЗапись.ЗаписатьИмяСвойства("password");
	НоваяЗапись.ЗаписатьЗначение(ПараметрыПодключения.JiraUserPass);
	НоваяЗапись.ЗаписатьКонецОбъекта();
	ТекстJson = НоваяЗапись.Закрыть();
	HTTPЗапрос.УстановитьТелоИзСтроки(ТекстJson);
	
	HTTPОтвет  = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если HTTPОтвет.КодСостояния <> 200 Тогда
		ОписаниеОшибки = "Код состояния: "+HTTPОтвет.КодСостояния+". Данные не получены!";
		ДобавитьЗаписьВЛог(Лог, ОписаниеОшибки, Отказ);
		ДобавитьЗаписьВЛог(Лог, СтрокаОтвет, Отказ);
		ЗаписатьРезультатОбмена(Лог);
		Лог = "";
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаОтвет);
	ИмяСвойства = "";
	JSessionId  = "";
	Пока ЧтениеJSON.Прочитать() Цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		Если ТипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли ТипJSON = ТипЗначенияJSON.Строка И ИмяСвойства = "value" Тогда
			JSessionId = ЧтениеJSON.ТекущееЗначение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(JSessionId) Тогда
		ДобавитьЗаписьВЛог(Лог, "Не получен id сессии", Отказ);
		Возврат ИмяФайла;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.JiraServerHost, ,ПараметрыПодключения.JiraUserName ,ПараметрыПодключения.JiraUserPass , , 60, ssl);
	
	СсылкаНаРесурс = СтрШаблон("/secure/TempoProjectBoard!excel.jspa?v=1&projectFilter=project&project=%3&periodType=FLEX&periodView=DATES&from=%1&to=%2", XMLСтрока(ДатаНачала), XMLСтрока(ДатаОкончания), КодПроекта);//ЗапросТестТаймШит;//"/secure/TempoProjectBoard!excel.jspa?v=1&projectFilter=project&project=15400&periodType=BILLING&periodView=PERIOD&period=0718";
		Заголовки = Новый Соответствие;
		
		Заголовки.Вставить("Cookie", СтрШаблон("JSESSIONID=%1; ",JSessionId));//"inproducttranslatemode=false; JSESSIONID=FDD0CD5D76F647BFE56974EFD511611B; atlassian.xsrf.token=BH5X-VY5M-KAJE-RKVH|4767fbd06496e1649d89fe42fcc0a45864dfee2b|lin");
		Заголовки.Вставить("Referer", Строка(ПараметрыПодключения.JiraServerProtoсol)+ПараметрыПодключения.JiraServerHost+СсылкаНаРесурс);
		
		HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,Заголовки);
		
		ОписаниеОшибки = "";
		Попытка
			HTTPОтвет  = Соединение.Получить(HTTPЗапрос); //GET запрос
			СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
			
			Если HTTPОтвет.КодСостояния <> 302 Тогда
				ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
				ДобавитьЗаписьВЛог(Лог, ОписаниеОшибки, Отказ);
				ДобавитьЗаписьВЛог(Лог, СтрокаОтвет, Отказ);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ДобавитьЗаписьВЛог(Лог, ОписаниеОшибки, Отказ);
		КонецПопытки;
		
		Соединение = Новый HTTPСоединение(ПараметрыПодключения.JiraServerHost, ,ПараметрыПодключения.JiraUserName ,ПараметрыПодключения.JiraUserPass , , 60, ssl);
		
		СсылкаНаРесурс = "/plugins/servlet/tempo-getWorklogExcel/";
		HTTPЗапрос = Новый HTTPЗапрос(СсылкаНаРесурс,Заголовки);
		
		ОписаниеОшибки = "";
		Попытка
			HTTPОтвет = Соединение.Получить(HTTPЗапрос); //GET запрос
			СтрокаОтвет = HTTPОтвет.ПолучитьТелоКакСтроку();
			HTTPОтвет.ПолучитьТелоКакДвоичныеДанные().Записать(ИмяФайла);
			Если HTTPОтвет.КодСостояния > 299 Тогда
				ОписаниеОшибки = "Код состояния: " + HTTPОтвет.КодСостояния + ". Данные не получены!";
				ДобавитьЗаписьВЛог(Лог, ОписаниеОшибки, Отказ);
				ДобавитьЗаписьВЛог(Лог, СтрокаОтвет, Отказ);
			КонецЕсли;
		Исключение
			ОписаниеОшибки = "Ошибка при выполнении HTTP запроса: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ДобавитьЗаписьВЛог(Лог, ОписаниеОшибки, Отказ);
		КонецПопытки;
		
	Возврат ИмяФайла;
	
КонецФункции

Процедура СоздатьОбъектыПоДаннымJIRA(НачалоПериода, КонецПериода) Экспорт
	
	ЛогОбмена = "";
	Отказ = Ложь;
	
	ФайлДанных = ПолучитьОтчетПоОтработанномуВремени(НачалоПериода, КонецПериода, ЛогОбмена, Отказ);
	
	Если Отказ Тогда
		ЗаписатьРезультатОбмена(ЛогОбмена);
		Возврат;
	КонецЕсли;	
	
	ТаблицаДанныхJira = ПолучитьТаблицуДанныхJira(ФайлДанных, ЛогОбмена, Отказ);
	
	Если Отказ Тогда
		ЗаписатьРезультатОбмена(ЛогОбмена);
		Возврат;
	КонецЕсли;	
	
	НаименованиеДанных = СтрШаблон(НСтр("ru='Данные JIRA с %1 по %2'"), НачалоПериода, КонецПериода);
	ТаблицаДанныхJira.ЗаполнитьЗначения(НаименованиеДанных, "Наименование");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаJIRA.Наименование КАК Наименование,
	|	ТаблицаJIRA.ТекстКода КАК ТекстКода,
	|	ТаблицаJIRA.СсылкаJIRA КАК СсылкаJIRA,
	|	ТаблицаJIRA.EpicLinkJIRA КАК EpicLinkJIRA,
	|	ТаблицаJIRA.КомпонентJIRA КАК КомпонентJIRA,
	|	ТаблицаJIRA.АвторJIRA КАК АвторJIRA,
	|	ТаблицаJIRA.ИсполнительJIRA КАК ИсполнительJIRA,
	|	ТаблицаJIRA.ДатаРаботыJIRA КАК ДатаРаботыJIRA,
	|	ТаблицаJIRA.ЧасыРаботыJIRA КАК ЧасыРаботыJIRA,
	|	ТаблицаJIRA.ПроверитьТекстКода КАК ПроверитьТекстКода,
	|	ТаблицаJIRA.ПроверяющийТекстКода КАК ПроверяющийТекстКода
	|ПОМЕСТИТЬ ВТ_ДанныеJIRA
	|ИЗ
	|	&ТаблицаJIRA КАК ТаблицаJIRA
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаJIRA,
	|	ИсполнительJIRA,
	|	ДатаРаботыJIRA
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеJIRA.Наименование КАК Наименование,
	|	ВТ_ДанныеJIRA.ТекстКода КАК ТекстКода,
	|	ВТ_ДанныеJIRA.СсылкаJIRA КАК СсылкаJIRA,
	|	ВТ_ДанныеJIRA.EpicLinkJIRA КАК EpicLinkJIRA,
	|	ВТ_ДанныеJIRA.КомпонентJIRA КАК КомпонентJIRA,
	|	ВТ_ДанныеJIRA.АвторJIRA КАК АвторJIRA,
	|	ВТ_ДанныеJIRA.ИсполнительJIRA КАК ИсполнительJIRA,
	|	ВТ_ДанныеJIRA.ДатаРаботыJIRA КАК ДатаРаботыJIRA,
	|	ВТ_ДанныеJIRA.ЧасыРаботыJIRA КАК ЧасыРаботыJIRA,
	|	ВТ_ДанныеJIRA.ПроверитьТекстКода КАК ПроверитьТекстКода,
	|	ВТ_ДанныеJIRA.ПроверяющийТекстКода КАК ПроверяющийТекстКода,
	|	ВЫБОР
	|		КОГДА НЕ Ошибки.Ссылка ЕСТЬ NULL
	|				И ВТ_ДанныеJIRA.ЧасыРаботыJIRA <> Ошибки.ЧасыРаботыJIRA
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПерезаписатьЧасы,
	|	Ошибки.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ДанныеJIRA КАК ВТ_ДанныеJIRA
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Ошибки КАК Ошибки
	|		ПО ВТ_ДанныеJIRA.СсылкаJIRA = Ошибки.СсылкаJIRA
	|			И ВТ_ДанныеJIRA.ИсполнительJIRA = Ошибки.ИсполнительJIRA
	|			И ВТ_ДанныеJIRA.ДатаРаботыJIRA = Ошибки.ДатаРаботыJIRA
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Ошибки.Ссылка ЕСТЬ NULL
	|					ИЛИ НЕ Ошибки.Ссылка ЕСТЬ NULL
	|						И ВТ_ДанныеJIRA.ЧасыРаботыJIRA <> Ошибки.ЧасыРаботыJIRA
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ТаблицаJIRA", ТаблицаДанныхJira);	
	ТаблицаДанныхJira = Запрос.Выполнить().Выгрузить();
	
	//Создадим объекты по данным JIRA
	Для Каждого СтрокаJira из ТаблицаДанныхJira Цикл
		Если СтрокаJira.ДатаРаботыJIRA < НачалоПериода ИЛИ
			СтрокаJira.ДатаРаботыJIRA >= КонецПериода Тогда
			Продолжить;
		КонецЕсли; 

		Если СтрокаJira.ПерезаписатьЧасы Тогда
			НоваяОшибка = СтрокаJira.Ссылка.ПолучитьОбъект();	
			ЗаполнитьЗначенияСвойств(НоваяОшибка, СтрокаJira, "ЧасыРаботыJIRA");
		Иначе	
			НоваяОшибка = Справочники.Ошибки.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НоваяОшибка, СтрокаJira);
			НоваяОшибка.Родитель = Справочники.Ошибки.ЗагруженоИзJIRA; 
			
			ТекстКода = СтрокаJira.ТекстКода;
			ПронумероватьТекстКода(ТекстКода);
			HTMLДокумент = Справочники.Ошибки.ПолучитьHTMLПредставлениеКода(ТекстКода);
			НоваяОшибка.ТекстКода = HTMLДокумент;
			
			НоваяОшибка.ТекстКодаСтрока = СтрокаJira.ТекстКода;
		КонецЕсли;
		
		Попытка
			НоваяОшибка.Записать();
		Исключение
			Текст = НСтр("ru = 'Не удалось записать ошибку.'") + Символы.ПС + ОписаниеОшибки();
			ЗаписатьРезультатОбмена(Текст);
		КонецПопытки;
	КонецЦикла;
	
	ЛогОбмена = ЛогОбмена + "Данные JIRA успешно получены!!! Создано объектов:"+ТаблицаДанныхJira.Количество();
	
	ЗаписатьРезультатОбмена(ЛогОбмена);

	УдалитьФайлы(ФайлДанных);
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

Процедура ВыполнитьСозданиеОбъектовПоДаннымJIRA() Экспорт
	
	ВчерашнийДень = НачалоДня(ТекущаяДата())-1;
	
	Час_14_00 = 60*60*14;
	
	НачалоПериода = НачалоДня(ВчерашнийДень)+Час_14_00; //Вчера 14:00
	КонецПериода  = НачалоДня(ТекущаяДата())+Час_14_00; //Сегодня 14:00
	
	СоздатьОбъектыПоДаннымJIRA(НачалоПериода, КонецПериода);
	
КонецПроцедуры	

#КонецОбласти
